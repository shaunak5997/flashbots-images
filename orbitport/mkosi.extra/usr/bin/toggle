#!/bin/bash
set -eu -o pipefail

# -e: script exits on any command error.
# -u: exits if any undefined variable is used.
# -o pipefail: catches errors in any part of a pipeline.

#
# Mode Switching Script
#
# Switch Paths:
# 1) "production" -> "stopped"
# 2) "stopped" -> "maintenance" (two minute delay)
# 3) "maintenance" -> "production"
# 
# Terminating NEW connections: Uses MODE_SELECTOR IN/OUT chain jumps to MAINTENANCE_IN/OUT or PRODUCTION_IN/OUT rule sets
# Terminating ESTABLISHED/RELATED connections: Uses conntrack to kill all current connections by port

# We must be root to change iptable rules
# Check if we're root, if not, fail
if [ "$(id -u)" != "0" ]; then
    echo "Error: This script must be run as root"
    exit 1
fi

###############################################################################
# Configuration
###############################################################################

# Delay implementationfiles
LOCK_FILE="/etc/searcher-network.lock"
STATE_FILE="/etc/searcher-network.state"
TIMESTAMP_FILE="/etc/searcher-network-last-stop.timestamp"

# Tools
IPTABLES="/usr/sbin/iptables"
CONNTRACK="/usr/sbin/conntrack"

# Chains
CHAIN_MODE_SELECTOR_IN="MODE_SELECTOR_IN"
CHAIN_MODE_SELECTOR_OUT="MODE_SELECTOR_OUT"
CHAIN_MAINTENANCE_IN="MAINTENANCE_IN"
CHAIN_MAINTENANCE_OUT="MAINTENANCE_OUT"
CHAIN_PRODUCTION_IN="PRODUCTION_IN"
CHAIN_PRODUCTION_OUT="PRODUCTION_OUT"

# Maintenance ports
SSH_DATA_PORT=10022
DNS_PORT=53
HTTP_PORT=80
HTTPS_PORT=443
EL_P2P_PORT=30303

# Production ports
FB_STATE_DIFF_PORT=8547
TITAN_STATE_DIFF_PORT_WSS=42203

###############################################################################
# Delay between stopping and starting maintenance
###############################################################################
with_lock() {
    (
        flock -x 200
        "$@"
    ) 200>"$LOCK_FILE"
}

get_state() {
    if [ ! -f "$STATE_FILE" ]; then
        echo "maintenance"  # Default state
    else
        cat "$STATE_FILE"
    fi
}

set_state() {
    echo "$1" > "$STATE_FILE"
}

# SECURITY: this should only be called from disconnect_from_production()
write_timestamp() {
    date +%s > "$TIMESTAMP_FILE"
}

check_delay() {
    if [ ! -f "$TIMESTAMP_FILE" ]; then
        echo "Error: No previous stop_production timestamp found"
        return 1
    fi
    
    last_stop=$(cat "$TIMESTAMP_FILE")
    # SECURITY: time can be manipulated by the host
    current_time=$(date +%s)
    delay_seconds=120  # 2 minutes
    
    if [ $((current_time - last_stop)) -lt $delay_seconds ]; then
        remaining=$((delay_seconds - (current_time - last_stop)))
        echo "Error: Must wait $remaining more seconds before starting maintenance"
        return 1
    fi
    return 0
}

###############################################################################
# Kill established connections via conntrack
###############################################################################
kill_established_connections() {
    local old_mode="$1"
    if [ "$old_mode" = "production" ]; then
        echo "Killing leftover production flows (port $TITAN_STATE_DIFF_PORT_WSS)..."
        $CONNTRACK -D -p tcp --dport $TITAN_STATE_DIFF_PORT_WSS 2>/dev/null

    elif [ "$old_mode" = "maintenance" ]; then
        echo "Killing leftover maintenance flows:"
        echo " - SSH data port $SSH_DATA_PORT"
        echo " - DNS $DNS_PORT, HTTP $HTTP_PORT, HTTPS $HTTPS_PORT, EL P2P $EL_P2P_PORT"
        # SSH data plane
        $CONNTRACK -D -p tcp --dport $SSH_DATA_PORT 2>/dev/null
        # DNS
        $CONNTRACK -D -p tcp --dport $DNS_PORT 2>/dev/null
        $CONNTRACK -D -p udp --dport $DNS_PORT 2>/dev/null
        # HTTP/HTTPS
        $CONNTRACK -D -p tcp --dport $HTTP_PORT 2>/dev/null
        $CONNTRACK -D -p tcp --dport $HTTPS_PORT 2>/dev/null
        # EL P2P
        $CONNTRACK -D -p tcp --dport $EL_P2P_PORT 2>/dev/null
        $CONNTRACK -D -p udp --dport $EL_P2P_PORT 2>/dev/null
    fi
    # if old_mode="stopped", nothing to kill
}
###############################################################################
# Toggle the iptables chain jumps
###############################################################################
configure_mode_rules() {
    local new_mode="$1"
    local old_mode="$2"

    # 1) Flush the mode selector so we remove references to the old sub-chain
    $IPTABLES -F $CHAIN_MODE_SELECTOR_IN
    $IPTABLES -F $CHAIN_MODE_SELECTOR_OUT

    # 2) Kill all established flows from old mode
    kill_established_connections "$old_mode"

    # 3) Depending on new_mode, jump to the matching sub-chains
    case "$new_mode" in
      maintenance)
        $IPTABLES -A $CHAIN_MODE_SELECTOR_IN  -j $CHAIN_MAINTENANCE_IN
        $IPTABLES -A $CHAIN_MODE_SELECTOR_OUT -j $CHAIN_MAINTENANCE_OUT
        ;;
      production)
        $IPTABLES -A $CHAIN_MODE_SELECTOR_IN  -j $CHAIN_PRODUCTION_IN
        $IPTABLES -A $CHAIN_MODE_SELECTOR_OUT -j $CHAIN_PRODUCTION_OUT
        ;;
      stopped)
        # No jump => default DROP. 
        ;;
      *)
        echo "Unknown mode $new_mode in configure_mode_rules"
        return 1
        ;;
    esac
    return 0
}

###############################################################################
# Container Namespace Rule Verification
# Check that the searcher-container-netns iptables rules blocking port 9000 are active
###############################################################################
check_searcher_namespace_rules() {
    local cont_name="searcher-container"
    local user="searcher"
    local daemon="/usr/bin/podman"

    # 1) Check container status
    local status
    status=$(su -s /bin/sh - $user -c "$daemon inspect --format '{{.State.Status}}' $cont_name 2>/dev/null" || true)
    if [ "$status" != "running" ]; then
        echo "ERROR: '$cont_name' container is not running; cannot verify rules."
        return 1
    fi

    # 2) Retrieve the container PID
    local pid
    pid=$(su -s /bin/sh - $user -c "$daemon inspect --format '{{.State.Pid}}' $cont_name 2>/dev/null" || true)
    if [ -z "$pid" ] || [ "$pid" = "0" ]; then
        echo "ERROR: Could not retrieve PID for '$cont_name'."
        return 1
    fi

    # 3) Check if the DROP rule on port 9000, 27107, and 123 is present in OUTPUT chain
    #    -C (check) returns 0 if a matching rule is found, 1 otherwise
    if nsenter --target "$pid" --net $IPTABLES -C OUTPUT -p tcp --dport 9000 -j DROP 2>/dev/null \
       && nsenter --target "$pid" --net $IPTABLES -C OUTPUT -p udp --dport 9000 -j DROP 2>/dev/null \
       && nsenter --target "$pid" --net $IPTABLES -C OUTPUT -p tcp --sport 27017 -j DROP 2>/dev/null \
       && nsenter --target "$pid" --net $IPTABLES -C OUTPUT -p udp --sport 27017 -j DROP 2>/dev/null \
       && nsenter --target "$pid" --net $IPTABLES -C OUTPUT -p udp --dport 123 -j DROP 2>/dev/null; then
        echo "OK: searcher-container firewall rules (DROP tcp/udp port 9000, tcp/udp port 27017, udp port 123) are ACTIVE."
        return 0
    else
        echo "WARNING: One or more searcher-container firewall rules (DROP ports 9000/27017/123) are NOT found."
        return 1
    fi
}

###############################################################################
# Mode Switching Functions
###############################################################################
move_to_production() {
    if [ "$(get_state)" != "maintenance" ]; then
        echo "Error: Can only move to production from maintenance state"
        return 1
    fi

    # Check the searcher-container-netns iptables rules are active first:
    if ! check_searcher_namespace_rules; then
        echo "Error: Required searcher-container-netns iptables rules not active!"
        return 1
    fi

    echo "Moving to production mode..."
    if configure_mode_rules "production" "maintenance"; then
        set_state "production"
        echo "Successfully switched to production mode"
        return 0
    else
        echo "Failed to switch to production mode"
        return 1
    fi
}

disconnect_from_production() {
    write_timestamp
    if [ "$(get_state)" != "production" ]; then
        echo "Error: Can only disconnect from production state"
        return 1
    fi
    echo "Disconnecting from production mode..."
    if configure_mode_rules "stopped" "production"; then
        set_state "stopped"
        echo "Successfully disconnected from production mode"
        return 0
    else
        echo "Failed to disconnect from production mode"
        return 1
    fi
}

connect_to_maintenance() {
    if [ "$(get_state)" != "stopped" ]; then
        echo "Error: Can only connect to maintenance from stopped state"
        return 1
    fi
    if ! check_delay; then
        return 1
    fi
    echo "Connecting to maintenance mode..."
    if configure_mode_rules "maintenance" "stopped"; then
        set_state "maintenance"
        rm -f "$TIMESTAMP_FILE"  # Clear timestamp after successful use
        echo "Successfully connected to maintenance mode"
        return 0
    else
        echo "Failed to connect to maintenance mode"
        return 1
    fi
}

toggle() {
    current_state=$(get_state)
    case "$current_state" in
        "production")
            echo "Switching from production to stopped..."
            disconnect_from_production
            result=$?
            ;;
        "stopped")
            echo "Switching from stopped to maintenance..."
            connect_to_maintenance
            result=$?
            ;;
        "maintenance")
            echo "Switching from maintenance to production..."
            move_to_production
            result=$?
            ;;
        *)
            echo "Error: Unknown state: $current_state"
            return 1
            ;;
    esac
    if [ $result -eq 0 ]; then
        echo "Successfully switched state"
        return 0
    else
        echo "Failed to switch state"
        return 1
    fi
}

# Main execution
with_lock toggle
exit $?
